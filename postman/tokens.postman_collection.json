{
	"info": {
		"_postman_id": "d06d597f-eb21-4322-bfa3-ce21bdfa458e",
		"name": "tokens",
		"description": "Three endpoints to manually test the API.\r\n\r\nRun the tests inside the \"tests\" folder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "tests",
			"item": [
				{
					"name": "Invalid body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 'bad request'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Errors are shown\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql(\r",
									"        [\r",
									"            \"name is required\",\r",
									"            \"ticker is required\"\r",
									"        ]\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"Blah blah\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tokens"
							]
						},
						"description": "POST request for creating a new token does not succeed if the Body of the request is invalid.\r\n- Empty property name\r\n- Missing property ticker"
					},
					"response": []
				},
				{
					"name": "Happy Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Same object values are returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.contain(\r",
									"        {\r",
									"            \"name\": \"Cronos\",\r",
									"            \"ticker\": \"CRO\",\r",
									"            \"description\": \"Utility token used to test this http request...\"\r",
									"        }\r",
									"    );\r",
									"});\r",
									"\r",
									"var tokenSchema = {\r",
									"    \"name\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"ticker\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"description\": {\r",
									"        \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"        \"type\": \"number\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test('Response schema is valid', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(tv4.validate(jsonData, tokenSchema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Cronos\",\r\n    \"ticker\": \"CRO\",\r\n    \"description\": \"Utility token used to test this http request...\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/tokens",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Staus is up\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql({ status: \"up\" });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Token not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 'not found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Shows error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql({ \"message\": \"Token with id 999999 not found\" });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/tokens/999999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"tokens",
								"999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Page not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 'not found'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Shows error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql({ \"message\": \"Page not found\" });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/this-page-does-not-exist",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"this-page-does-not-exist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create new token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"USD Coin \",\r\n    \"ticker\": \"USDC\",\r\n    \"description\": \"Stable coin USD backed\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host-url}}/api/tokens",
					"host": [
						"{{host-url}}"
					],
					"path": [
						"api",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all tokens",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host-url}}/api/tokens",
					"host": [
						"{{host-url}}"
					],
					"path": [
						"api",
						"tokens"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one token",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ethereum\",\r\n    \"ticker\": \"eth\",\r\n    \"description\": \"Blah blah\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host-url}}/api/tokens/1",
					"host": [
						"{{host-url}}"
					],
					"path": [
						"api",
						"tokens",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host-url",
			"value": "https://tokens-api-320b6f9fa4f2.herokuapp.com"
		},
		{
			"key": "host-url",
			"value": "http://localhost:3030",
			"disabled": true
		}
	]
}